# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

jobs:
- job: Linux

  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'

  steps:
  - script: |
      set -e
      dotnet build SharpSnmpLib.NetStandard.sln --configuration $(buildConfiguration)
      dotnet test Tests/CSharpCore/Tests.NetStandard.csproj --configuration $(buildConfiguration) --no-build --logger trx
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

- job: macOS

  pool:
    vmImage: 'macOS-10.13'

  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'

  steps:
  - script: |
      sudo sysctl -w net.inet.udp.maxdgram=65535
      export CI=true
      set -e
      dotnet build SharpSnmpLib.NetStandard.sln --configuration $(buildConfiguration)
      dotnet test Tests/CSharpCore/Tests.NetStandard.csproj --configuration $(buildConfiguration) --no-build --logger trx
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

- job: Windows

  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    solution: '**/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'

  steps:
  - script: |
      build.release.bat
  - script: |
      dotnet test Tests/CSharpCore/Tests.NetStandard.csproj --configuration $(buildConfiguration) --no-build --logger trx --collect "Code coverage"
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
